Ricky O'Connor 
Part1 Report

Some issues I faced During part 1 was getting the Standered Multiplication Algorithm to produce a correct product, I struggeled with shifting the 
  bits for the multiplication process. I also tried to Append and pop to preform the shift but I was unable to do so. I also struggeled a bit with python 
  overall as im still learing the language, so I had to research a lot of methods as well as syntax erros, etc. I learned so much about pyhton as well as 
  how to preform both Algorithms.
  
  I was able to preform booths Algorithm
  Here are some of the results:

Multiplicand:  -87
Multiplier:  219
Initial values
A 111111111010100100000000000000000
S 000000000101011100000000000000000
P 00000000000000000000000110110110
Starting calculation
P +  S: 000000000101011100000000110110110
P >> 1: 000000000010101110000000011011011
P >> 1: 000000000001010111000000001101101
P +  A: 111111111011111011000000001101101
P >> 1: 111111111101111101100000000110110
P +  S: 000000000011011001100000000110110
P >> 1: 000000000001101100110000000011011
P >> 1: 000000000000110110011000000001101
P +  A: 111111111011011010011000000001101
P >> 1: 111111111101101101001100000000110
P +  S: 000000000011001001001100000000110
P >> 1: 000000000001100100100110000000011
P >> 1: 000000000000110010010011000000001
P +  A: 111111111011010110010011000000001
P >> 1: 111111111101101011001001100000000
P >> 1: 111111111110110101100100110000000
P >> 1: 111111111111011010110010011000000
P >> 1: 111111111111101101011001001100000
P >> 1: 111111111111110110101100100110000
P >> 1: 111111111111111011010110010011000
P >> 1: 111111111111111101101011001001100
P >> 1: 111111111111111110110101100100110
P >> 1: 111111111111111111011010110010011
('Product is = ', -19053)
-----------------------------------
-----------------------------------
Multiplicand:  541
Multiplier:  -253
Initial values
A 000000100001110100000000000000000
S 111111011110001100000000000000000
P 00000000000000011111111000000110
Starting calculation
P +  S: 111111011110001111111111000000110
P >> 1: 111111101111000111111111100000011
P >> 1: 111111110111100011111111110000001
P +  A: 000000011001010111111111110000001
P >> 1: 000000001100101011111111111000000
P >> 1: 000000000110010101111111111100000
P >> 1: 000000000011001010111111111110000
P >> 1: 000000000001100101011111111111000
P >> 1: 000000000000110010101111111111100
P >> 1: 000000000000011001010111111111110
P +  S: 111111011110100101010111111111110
P >> 1: 111111101111010010101011111111111
P >> 1: 111111110111101001010101111111111
P >> 1: 111111111011110100101010111111111
P >> 1: 111111111101111010010101011111111
P >> 1: 111111111110111101001010101111111
P >> 1: 111111111111011110100101010111111
P >> 1: 111111111111101111010010101011111
P >> 1: 111111111111110111101001010101111
P >> 1: 111111111111111011110100101010111
('Product is = ', -136873)
-----------------------------------
-----------------------------------
Multiplicand:  398
Multiplier:  162
Initial values
A 000000011000111000000000000000000
S 111111100111001000000000000000000
P 00000000000000000000000101000100
Starting calculation
P >> 1: 00000000000000000000000010100010
P +  S: 111111100111001000000000010100010
P >> 1: 111111110011100100000000001010001
P +  A: 000000001100011100000000001010001
P >> 1: 000000000110001110000000000101000
P >> 1: 000000000011000111000000000010100
P >> 1: 000000000001100011100000000001010
P +  S: 111111101000101011100000000001010
P >> 1: 111111110100010101110000000000101
P +  A: 000000001101001101110000000000101
P >> 1: 000000000110100110111000000000010
P +  S: 111111101101101110111000000000010
P >> 1: 111111110110110111011100000000001
P +  A: 000000001111101111011100000000001
P >> 1: 000000000111110111101110000000000
P >> 1: 000000000011111011110111000000000
P >> 1: 000000000001111101111011100000000
P >> 1: 000000000000111110111101110000000
P >> 1: 000000000000011111011110111000000
P >> 1: 000000000000001111101111011100000
P >> 1: 000000000000000111110111101110000
P >> 1: 000000000000000011111011110111000
P >> 1: 000000000000000001111101111011100
('Product is = ', 64476)
-----------------------------------
-----------------------------------
Multiplicand:  -11
Multiplier:  291
Initial values
A 111111111111010100000000000000000
S 000000000000101100000000000000000
P 00000000000000000000001001000110
Starting calculation
P +  S: 000000000000101100000001001000110
P >> 1: 000000000000010110000000100100011
P >> 1: 000000000000001011000000010010001
P +  A: 111111111111011111000000010010001
P >> 1: 111111111111101111100000001001000
P >> 1: 111111111111110111110000000100100
P >> 1: 111111111111111011111000000010010
P +  S: 000000000000100111111000000010010
P >> 1: 000000000000010011111100000001001
P +  A: 111111111111100111111100000001001
P >> 1: 111111111111110011111110000000100
P >> 1: 111111111111111001111111000000010
P +  S: 000000000000100101111111000000010
P >> 1: 000000000000010010111111100000001
P +  A: 111111111111100110111111100000001
P >> 1: 111111111111110011011111110000000
P >> 1: 111111111111111001101111111000000
P >> 1: 111111111111111100110111111100000
P >> 1: 111111111111111110011011111110000
P >> 1: 111111111111111111001101111111000
P >> 1: 111111111111111111100110111111100
P >> 1: 111111111111111111110011011111110
P >> 1: 111111111111111111111001101111111
('Product is = ', -3201)
-----------------------------------